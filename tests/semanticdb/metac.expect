expect/TastyQueryByNameMethod.scala
-----------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryByNameMethod.scala
Text => empty
Language => Scala
Symbols => 3 entries
Occurrences => 3 entries

Symbols:
_empty_/ByNameMethod# => class ByNameMethod extends Object { self: ByNameMethod => +2 decls }
_empty_/ByNameMethod#`<init>`(). => primary ctor <init> (): ByNameMethod
_empty_/ByNameMethod#x(). => method x => Int

Occurrences:
[0:6..0:18): ByNameMethod <- _empty_/ByNameMethod#
[1:4..1:4): <- _empty_/ByNameMethod#`<init>`().
[1:8..1:9): x <- _empty_/ByNameMethod#x().

expect/TastyQueryMatching.scala
-------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMatching.scala
Text => empty
Language => Scala
Symbols => 9 entries
Occurrences => 30 entries

Symbols:
_empty_/TastyQueryMatching# => class TastyQueryMatching extends Object { self: TastyQueryMatching => +3 decls }
_empty_/TastyQueryMatching#`<init>`(). => primary ctor <init> (): TastyQueryMatching
_empty_/TastyQueryMatching#matchingDefault(). => method matchingDefault (param x: Boolean | Unit): Unit
_empty_/TastyQueryMatching#matchingDefault().(x) => param x: Boolean | Unit
_empty_/TastyQueryMatching#matchingOr(). => method matchingOr (param x: Int | String | Double): String | Int | Unit
_empty_/TastyQueryMatching#matchingOr().(x) => param x: Int | String | Double
local0 => val local s: String
local1 => val local number: Int
local2 => val local double: Double

Occurrences:
[0:6..0:24): TastyQueryMatching <- _empty_/TastyQueryMatching#
[1:4..1:4): <- _empty_/TastyQueryMatching#`<init>`().
[1:8..1:18): matchingOr <- _empty_/TastyQueryMatching#matchingOr().
[1:19..1:20): x <- _empty_/TastyQueryMatching#matchingOr().(x)
[1:23..1:26): Int -> scala/Int#
[1:27..1:28): | -> scala/`|`#
[1:29..1:35): String -> scala/Predef.String#
[1:36..1:37): | -> scala/`|`#
[1:38..1:44): Double -> scala/Double#
[2:8..2:9): x -> _empty_/TastyQueryMatching#matchingOr().(x)
[3:17..3:18): s <- local0
[3:20..3:26): String -> scala/Predef.String#
[3:30..3:31): s -> local0
[3:32..3:38): concat -> java/lang/String#concat().
[3:39..3:40): s -> local0
[4:17..4:23): number <- local1
[4:25..4:28): Int -> scala/Int#
[4:33..4:39): number -> local1
[4:40..4:41): * -> scala/Int#`*`(+3).
[4:42..4:48): number -> local1
[5:17..5:23): double <- local2
[5:25..5:31): Double -> scala/Double#
[5:35..5:40): print -> scala/Predef.print().
[7:8..7:23): matchingDefault <- _empty_/TastyQueryMatching#matchingDefault().
[7:24..7:25): x <- _empty_/TastyQueryMatching#matchingDefault().(x)
[7:27..7:34): Boolean -> scala/Boolean#
[7:35..7:36): | -> scala/`|`#
[7:37..7:41): Unit -> scala/Unit#
[8:8..8:9): x -> _empty_/TastyQueryMatching#matchingDefault().(x)
[9:20..9:24): Unit -> scala/Unit#

expect/TastyQueryMethodComplexFormula.scala
-------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodComplexFormula.scala
Text => empty
Language => Scala
Symbols => 5 entries
Occurrences => 12 entries

Symbols:
_empty_/TastyQueryMethodComplexFormula# => class TastyQueryMethodComplexFormula extends Object { self: TastyQueryMethodComplexFormula => +2 decls }
_empty_/TastyQueryMethodComplexFormula#`<init>`(). => primary ctor <init> (): TastyQueryMethodComplexFormula
_empty_/TastyQueryMethodComplexFormula#complexFormula(). => method complexFormula (param param1: Int, param param2: Int): Int
_empty_/TastyQueryMethodComplexFormula#complexFormula().(param1) => param param1: Int
_empty_/TastyQueryMethodComplexFormula#complexFormula().(param2) => param param2: Int

Occurrences:
[0:6..0:36): TastyQueryMethodComplexFormula <- _empty_/TastyQueryMethodComplexFormula#
[1:8..1:8): <- _empty_/TastyQueryMethodComplexFormula#`<init>`().
[1:12..1:26): complexFormula <- _empty_/TastyQueryMethodComplexFormula#complexFormula().
[1:27..1:33): param1 <- _empty_/TastyQueryMethodComplexFormula#complexFormula().(param1)
[1:34..1:37): Int -> scala/Int#
[1:39..1:45): param2 <- _empty_/TastyQueryMethodComplexFormula#complexFormula().(param2)
[1:46..1:49): Int -> scala/Int#
[1:54..1:60): param1 -> _empty_/TastyQueryMethodComplexFormula#complexFormula().(param1)
[1:60..1:61): * -> scala/Int#`*`(+3).
[1:61..1:67): param2 -> _empty_/TastyQueryMethodComplexFormula#complexFormula().(param2)
[1:68..1:69): / -> scala/Int#`/`(+3).
[1:69..1:75): param2 -> _empty_/TastyQueryMethodComplexFormula#complexFormula().(param2)

expect/TastyQueryMethodWithParam.scala
--------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodWithParam.scala
Text => empty
Language => Scala
Symbols => 5 entries
Occurrences => 7 entries

Symbols:
_empty_/MethodWithParam# => class MethodWithParam extends Object { self: MethodWithParam => +2 decls }
_empty_/MethodWithParam#`<init>`(). => primary ctor <init> (): MethodWithParam
_empty_/MethodWithParam#methodWithTemParam(). => method methodWithTemParam (param z: Int, param y: String): String
_empty_/MethodWithParam#methodWithTemParam().(y) => param y: String
_empty_/MethodWithParam#methodWithTemParam().(z) => param z: Int

Occurrences:
[0:6..0:21): MethodWithParam <- _empty_/MethodWithParam#
[1:4..1:4): <- _empty_/MethodWithParam#`<init>`().
[1:8..1:26): methodWithTemParam <- _empty_/MethodWithParam#methodWithTemParam().
[1:27..1:28): z <- _empty_/MethodWithParam#methodWithTemParam().(z)
[1:30..1:33): Int -> scala/Int#
[1:35..1:36): y <- _empty_/MethodWithParam#methodWithTemParam().(y)
[1:38..1:44): String -> scala/Predef.String#

expect/TastyQueryMethodWithParams.scala
---------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodWithParams.scala
Text => empty
Language => Scala
Symbols => 19 entries
Occurrences => 53 entries

Symbols:
_empty_/MethodWithParamMultiply# => class MethodWithParamMultiply extends Object { self: MethodWithParamMultiply => +6 decls }
_empty_/MethodWithParamMultiply#`<init>`(). => primary ctor <init> (): MethodWithParamMultiply
_empty_/MethodWithParamMultiply#addition(). => method addition (param z: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#addition().(y) => param y: Int
_empty_/MethodWithParamMultiply#addition().(z) => param z: Int
_empty_/MethodWithParamMultiply#complexFormula(). => method complexFormula (param param1: Int, param param2: Double, param param3: Float): Int
_empty_/MethodWithParamMultiply#complexFormula().(param1) => param param1: Int
_empty_/MethodWithParamMultiply#complexFormula().(param2) => param param2: Double
_empty_/MethodWithParamMultiply#complexFormula().(param3) => param param3: Float
_empty_/MethodWithParamMultiply#division(). => method division (param x: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#division().(x) => param x: Int
_empty_/MethodWithParamMultiply#division().(y) => param y: Int
_empty_/MethodWithParamMultiply#multiplication(). => method multiplication (param x: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#multiplication().(x) => param x: Int
_empty_/MethodWithParamMultiply#multiplication().(y) => param y: Int
_empty_/MethodWithParamMultiply#power(). => method power (param x: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#power().(x) => param x: Int
_empty_/MethodWithParamMultiply#power().(y) => param y: Int
local0 => val local intermidiate: Int

Occurrences:
[0:6..0:29): MethodWithParamMultiply <- _empty_/MethodWithParamMultiply#
[1:4..1:4): <- _empty_/MethodWithParamMultiply#`<init>`().
[1:8..1:16): addition <- _empty_/MethodWithParamMultiply#addition().
[1:17..1:18): z <- _empty_/MethodWithParamMultiply#addition().(z)
[1:20..1:23): Int -> scala/Int#
[1:25..1:26): y <- _empty_/MethodWithParamMultiply#addition().(y)
[1:28..1:31): Int -> scala/Int#
[1:35..1:36): z -> _empty_/MethodWithParamMultiply#addition().(z)
[1:36..1:37): + -> scala/Int#`+`(+4).
[1:37..1:38): y -> _empty_/MethodWithParamMultiply#addition().(y)
[2:8..2:22): multiplication <- _empty_/MethodWithParamMultiply#multiplication().
[2:23..2:24): x <- _empty_/MethodWithParamMultiply#multiplication().(x)
[2:25..2:28): Int -> scala/Int#
[2:30..2:31): y <- _empty_/MethodWithParamMultiply#multiplication().(y)
[2:33..2:36): Int -> scala/Int#
[2:40..2:41): x -> _empty_/MethodWithParamMultiply#multiplication().(x)
[2:41..2:42): * -> scala/Int#`*`(+3).
[2:42..2:43): y -> _empty_/MethodWithParamMultiply#multiplication().(y)
[3:8..3:16): division <- _empty_/MethodWithParamMultiply#division().
[3:17..3:18): x <- _empty_/MethodWithParamMultiply#division().(x)
[3:19..3:22): Int -> scala/Int#
[3:24..3:25): y <- _empty_/MethodWithParamMultiply#division().(y)
[3:26..3:29): Int -> scala/Int#
[3:33..3:34): x -> _empty_/MethodWithParamMultiply#division().(x)
[3:34..3:35): / -> scala/Int#`/`(+3).
[3:35..3:36): y -> _empty_/MethodWithParamMultiply#division().(y)
[4:8..4:13): power <- _empty_/MethodWithParamMultiply#power().
[4:14..4:15): x <- _empty_/MethodWithParamMultiply#power().(x)
[4:16..4:19): Int -> scala/Int#
[4:21..4:22): y <- _empty_/MethodWithParamMultiply#power().(y)
[4:23..4:26): Int -> scala/Int#
[4:30..4:31): x -> _empty_/MethodWithParamMultiply#power().(x)
[4:31..4:32): ^ -> scala/Int#`^`(+3).
[4:32..4:33): y -> _empty_/MethodWithParamMultiply#power().(y)
[5:8..5:22): complexFormula <- _empty_/MethodWithParamMultiply#complexFormula().
[5:23..5:29): param1 <- _empty_/MethodWithParamMultiply#complexFormula().(param1)
[5:31..5:34): Int -> scala/Int#
[5:36..5:42): param2 <- _empty_/MethodWithParamMultiply#complexFormula().(param2)
[5:44..5:50): Double -> scala/Double#
[5:52..5:58): param3 <- _empty_/MethodWithParamMultiply#complexFormula().(param3)
[5:60..5:65): Float -> scala/Float#
[6:12..6:24): intermidiate <- local0
[6:28..6:34): param3 -> _empty_/MethodWithParamMultiply#complexFormula().(param3)
[6:35..6:36): * -> scala/Float#`*`(+5).
[6:38..6:44): param1 -> _empty_/MethodWithParamMultiply#complexFormula().(param1)
[6:45..6:46): + -> scala/Int#`+`(+6).
[6:47..6:53): param3 -> _empty_/MethodWithParamMultiply#complexFormula().(param3)
[6:54..6:55): / -> scala/Float#`/`(+6).
[6:55..6:61): param2 -> _empty_/MethodWithParamMultiply#complexFormula().(param2)
[6:63..6:68): toInt -> scala/Double#toInt().
[7:8..7:20): intermidiate -> local0
[7:21..7:22): ^ -> scala/Int#`^`(+3).
[7:23..7:35): intermidiate -> local0

expect/TastyQuerySimpleClass.scala
----------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQuerySimpleClass.scala
Text => empty
Language => Scala
Symbols => 2 entries
Occurrences => 2 entries

Symbols:
_empty_/SimpleClass# => class SimpleClass extends Object { self: SimpleClass => +1 decls }
_empty_/SimpleClass#`<init>`(). => primary ctor <init> (): SimpleClass

Occurrences:
[0:0..0:0): <- _empty_/SimpleClass#`<init>`().
[0:6..0:17): SimpleClass <- _empty_/SimpleClass#

expect/TastyQueryVariousFeatures.scala
--------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryVariousFeatures.scala
Text => empty
Language => Scala
Symbols => 24 entries
Occurrences => 75 entries

Symbols:
_empty_/VariousFeatures# => class VariousFeatures extends Object { self: VariousFeatures => +8 decls }
_empty_/VariousFeatures#`<init>`(). => primary ctor <init> (param param1: Double | String, param param2: Int): VariousFeatures
_empty_/VariousFeatures#`<init>`().(param1) => param param1: Double | String
_empty_/VariousFeatures#`<init>`().(param2) => param param2: Int
_empty_/VariousFeatures#incompleteFormula(). => method incompleteFormula (param param1: Int, param param2: Double, param param3: Float): Int
_empty_/VariousFeatures#incompleteFormula().(param1) => param param1: Int
_empty_/VariousFeatures#incompleteFormula().(param2) => param param2: Double
_empty_/VariousFeatures#incompleteFormula().(param3) => param param3: Float
_empty_/VariousFeatures#modfiyString(). => method modfiyString (param inputString: String): String
_empty_/VariousFeatures#modfiyString().(inputString) => param inputString: String
_empty_/VariousFeatures#modified. => val method modified String
_empty_/VariousFeatures#param1. => private[this] val method param1 Double | String
_empty_/VariousFeatures#param2. => private[this] val method param2 Int
_empty_/VariousFeatures#usingClassParams(). => method usingClassParams => Int | Double | None
_empty_/VariousFeatures#x. => val method x String & Int
_empty_/VariousFeatures2# => class VariousFeatures2 extends Object { self: VariousFeatures2 => +3 decls }
_empty_/VariousFeatures2#`<init>`(). => primary ctor <init> (): VariousFeatures2
_empty_/VariousFeatures2#printHelloWorld(). => method printHelloWorld => Unit
_empty_/VariousFeatures2#y. => val method y String
local0 => val local param1: Double
local1 => val local someLocalVal: Int
local2 => val local otherLocalVal: Int
local3 => val local string: String
local4 => val local double: Double

Occurrences:
[0:6..0:21): VariousFeatures <- _empty_/VariousFeatures#
[0:21..0:21): <- _empty_/VariousFeatures#`<init>`().
[0:22..0:28): param1 <- _empty_/VariousFeatures#param1.
[0:30..0:36): Double -> scala/Double#
[0:37..0:38): | -> scala/`|`#
[0:39..0:45): String -> scala/Predef.String#
[0:47..0:53): param2 <- _empty_/VariousFeatures#param2.
[0:55..0:58): Int -> scala/Int#
[1:8..1:9): x <- _empty_/VariousFeatures#x.
[1:12..1:18): String -> scala/Predef.String#
[1:19..1:20): & -> scala/`&`#
[1:21..1:24): Int -> scala/Int#
[1:27..1:30): ??? -> scala/Predef.`???`().
[2:8..2:24): usingClassParams <- _empty_/VariousFeatures#usingClassParams().
[2:27..2:33): param1 -> _empty_/VariousFeatures#param1.
[3:13..3:19): param1 <- local0
[3:21..3:27): Double -> scala/Double#
[4:12..4:18): param1 -> local0
[4:19..4:24): toInt -> scala/Double#toInt().
[4:25..4:26): + -> scala/Int#`+`(+4).
[4:27..4:33): param2 -> _empty_/VariousFeatures#param2.
[6:37..6:49): someLocalVal <- local1
[7:16..7:29): otherLocalVal <- local2
[8:15..8:21): param2 -> _empty_/VariousFeatures#param2.
[8:22..8:23): > -> scala/Int#`>`(+3).
[9:17..9:29): someLocalVal -> local1
[9:30..9:31): * -> scala/Int#`*`(+3).
[9:32..9:45): otherLocalVal -> local2
[9:47..9:55): toDouble -> scala/Int#toDouble().
[11:16..11:20): None -> scala/None.
[12:8..12:20): modfiyString <- _empty_/VariousFeatures#modfiyString().
[12:21..12:32): inputString <- _empty_/VariousFeatures#modfiyString().(inputString)
[12:34..12:40): String -> scala/Predef.String#
[12:43..12:49): String -> scala/Predef.String#
[13:8..13:14): param1 -> _empty_/VariousFeatures#param1.
[14:17..14:23): string <- local3
[14:25..14:31): String -> scala/Predef.String#
[14:35..14:41): string -> local3
[14:42..14:48): concat -> java/lang/String#concat().
[14:49..14:60): inputString -> _empty_/VariousFeatures#modfiyString().(inputString)
[15:17..15:23): double <- local4
[15:25..15:31): Double -> scala/Double#
[15:35..15:46): inputString -> _empty_/VariousFeatures#modfiyString().(inputString)
[15:47..15:53): charAt -> java/lang/String#charAt().
[15:54..15:60): double -> local4
[15:61..15:66): toInt -> scala/Double#toInt().
[15:68..15:76): toString -> scala/Any#toString().
[17:8..17:16): modified <- _empty_/VariousFeatures#modified.
[17:19..17:31): modfiyString -> _empty_/VariousFeatures#modfiyString().
[19:8..19:25): incompleteFormula <- _empty_/VariousFeatures#incompleteFormula().
[19:26..19:32): param1 <- _empty_/VariousFeatures#incompleteFormula().(param1)
[19:34..19:37): Int -> scala/Int#
[19:39..19:45): param2 <- _empty_/VariousFeatures#incompleteFormula().(param2)
[19:47..19:53): Double -> scala/Double#
[19:55..19:61): param3 <- _empty_/VariousFeatures#incompleteFormula().(param3)
[19:63..19:68): Float -> scala/Float#
[20:12..20:18): param3 -> _empty_/VariousFeatures#incompleteFormula().(param3)
[20:19..20:20): % -> scala/Float#`%`(+5).
[20:22..20:28): param1 -> _empty_/VariousFeatures#incompleteFormula().(param1)
[20:29..20:30): + -> scala/Int#`+`(+6).
[20:31..20:37): param3 -> _empty_/VariousFeatures#incompleteFormula().(param3)
[20:38..20:39): / -> scala/Float#`/`(+6).
[20:39..20:45): param2 -> _empty_/VariousFeatures#incompleteFormula().(param2)
[20:47..20:52): toInt -> scala/Double#toInt().
[20:53..20:55): == -> scala/Int#`==`(+3).
[21:12..21:15): ??? -> scala/Predef.`???`().
[23:12..23:18): param1 -> _empty_/VariousFeatures#incompleteFormula().(param1)
[23:19..23:20): ^ -> scala/Int#`^`(+3).
[23:21..23:27): param1 -> _empty_/VariousFeatures#incompleteFormula().(param1)
[27:6..27:22): VariousFeatures2 <- _empty_/VariousFeatures2#
[28:4..28:4): <- _empty_/VariousFeatures2#`<init>`().
[28:8..28:9): y <- _empty_/VariousFeatures2#y.
[29:8..29:23): printHelloWorld <- _empty_/VariousFeatures2#printHelloWorld().
[29:26..29:31): print -> scala/Predef.print().
[29:32..29:33): y -> _empty_/VariousFeatures2#y.

