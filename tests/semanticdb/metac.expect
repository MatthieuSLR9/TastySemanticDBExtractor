expect/TastyQueryByNameMethod.scala
-----------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryByNameMethod.scala
Text => empty
Language => Scala
Symbols => 3 entries
Occurrences => 3 entries

Symbols:
_empty_/ByNameMethod# => class ByNameMethod extends Object { self: ByNameMethod => +2 decls }
_empty_/ByNameMethod#`<init>`(). => primary ctor <init> (): ByNameMethod
_empty_/ByNameMethod#x(). => method x => Int

Occurrences:
[0:6..0:18): ByNameMethod <- _empty_/ByNameMethod#
[1:4..1:4): <- _empty_/ByNameMethod#`<init>`().
[1:8..1:9): x <- _empty_/ByNameMethod#x().

expect/TastyQueryLists.scala
----------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryLists.scala
Text => empty
Language => Scala
Symbols => 19 entries
Occurrences => 69 entries
Synthetics => 15 entries

Symbols:
_empty_/TastyQueryLists# => class TastyQueryLists extends Object { self: TastyQueryLists => +10 decls }
_empty_/TastyQueryLists#`<init>`(). => primary ctor <init> (): TastyQueryLists
_empty_/TastyQueryLists#firstElement(). => method firstElement (): Any
_empty_/TastyQueryLists#flatMap(). => method flatMap (): List[String]
_empty_/TastyQueryLists#mapDouble(). => method mapDouble (): List[Int]
_empty_/TastyQueryLists#recursion(). => method recursion (param x: List[Int]): String
_empty_/TastyQueryLists#recursion().(x) => param x: List[Int]
_empty_/TastyQueryLists#recursionResult(). => method recursionResult (): String
_empty_/TastyQueryLists#syntheticList. => val method syntheticList List[Int]
_empty_/TastyQueryLists#syntheticList2. => val method syntheticList2 List[Int]
_empty_/TastyQueryLists#syntheticList3. => val method syntheticList3 List[String | Int]
_empty_/TastyQueryLists#syntheticList4. => val method syntheticList4 List[List[Int]]
local0 => param innerList: List[Int]
local1 => param x: Int
local2 => param innerList: List[Int]
local3 => param x: Int
local4 => param x: String
local5 => param x: Int
local6 => val local tail: List[Int]

Occurrences:
[0:6..0:21): TastyQueryLists <- _empty_/TastyQueryLists#
[2:2..2:2): <- _empty_/TastyQueryLists#`<init>`().
[2:6..2:19): syntheticList <- _empty_/TastyQueryLists#syntheticList.
[2:22..2:26): List -> scala/package.List.
[3:6..3:20): syntheticList2 <- _empty_/TastyQueryLists#syntheticList2.
[3:23..3:36): syntheticList -> _empty_/TastyQueryLists#syntheticList.
[3:37..3:39): ++ -> scala/collection/IterableOps#`++`().
[3:40..3:53): syntheticList -> _empty_/TastyQueryLists#syntheticList.
[4:6..4:20): syntheticList3 <- _empty_/TastyQueryLists#syntheticList3.
[4:23..4:27): List -> scala/package.List.
[4:43..4:45): ++ -> scala/collection/IterableOps#`++`().
[4:46..4:50): List -> scala/package.List.
[5:6..5:20): syntheticList4 <- _empty_/TastyQueryLists#syntheticList4.
[5:23..5:27): List -> scala/package.List.
[5:28..5:32): List -> scala/package.List.
[5:43..5:47): List -> scala/package.List.
[7:6..7:13): flatMap <- _empty_/TastyQueryLists#flatMap().
[7:17..7:21): List -> scala/package.List#
[7:22..7:28): String -> scala/Predef.String#
[8:4..8:18): syntheticList4 -> _empty_/TastyQueryLists#syntheticList4.
[8:19..8:26): flatMap -> scala/collection/immutable/List#flatMap().
[8:27..8:36): innerList <- local0
[9:6..9:15): innerList -> local0
[9:16..9:19): map -> scala/collection/immutable/List#map().
[9:20..9:21): x <- local1
[9:29..9:30): x -> local1
[9:31..9:32): > -> scala/Int#`>`(+3).
[11:4..11:18): syntheticList4 -> _empty_/TastyQueryLists#syntheticList4.
[11:19..11:26): flatMap -> scala/collection/immutable/List#flatMap().
[11:27..11:36): innerList <- local2
[12:6..12:15): innerList -> local2
[12:16..12:19): map -> scala/collection/immutable/List#map().
[12:20..12:21): x <- local3
[12:29..12:30): x -> local3
[12:31..12:32): % -> scala/Int#`%`(+3).
[12:34..12:36): == -> scala/Int#`==`(+3).
[12:54..12:60): filter -> scala/collection/immutable/List#filter().
[12:61..12:62): x <- local4
[12:66..12:67): x -> local4
[12:68..12:74): length -> java/lang/String#length().
[12:75..12:77): != -> scala/Int#`!=`(+3).
[16:6..16:15): mapDouble <- _empty_/TastyQueryLists#mapDouble().
[16:19..16:23): List -> scala/package.List#
[16:24..16:27): Int -> scala/Int#
[17:4..17:17): syntheticList -> _empty_/TastyQueryLists#syntheticList.
[17:18..17:21): map -> scala/collection/immutable/List#map().
[17:22..17:23): x <- local5
[17:27..17:28): x -> local5
[17:29..17:30): * -> scala/Int#`*`(+3).
[20:6..20:18): firstElement <- _empty_/TastyQueryLists#firstElement().
[20:22..20:25): Any -> scala/Any#
[21:4..21:17): syntheticList -> _empty_/TastyQueryLists#syntheticList.
[21:18..21:28): headOption -> scala/collection/LinearSeqOps#headOption().
[21:29..21:38): getOrElse -> scala/Option#getOrElse().
[24:6..24:15): recursion <- _empty_/TastyQueryLists#recursion().
[24:16..24:17): x <- _empty_/TastyQueryLists#recursion().(x)
[24:19..24:23): List -> scala/package.List#
[24:24..24:27): Int -> scala/Int#
[24:31..24:37): String -> scala/Predef.String#
[25:4..25:5): x -> _empty_/TastyQueryLists#recursion().(x)
[26:13..26:15): :: -> scala/package.`::`.
[26:16..26:20): tail <- local6
[26:24..26:33): recursion -> _empty_/TastyQueryLists#recursion().
[26:34..26:38): tail -> local6
[27:11..27:14): Nil -> scala/package.Nil.
[31:6..31:21): recursionResult <- _empty_/TastyQueryLists#recursionResult().
[31:25..31:31): String -> scala/Predef.String#
[32:4..32:13): recursion -> _empty_/TastyQueryLists#recursion().
[32:14..32:27): syntheticList -> _empty_/TastyQueryLists#syntheticList.

Synthetics:
[2:22..2:26):List => *.apply[Int]
[3:23..3:39):syntheticList ++ => *[Int]
[4:23..4:45):List("foo", "foo2") ++ => *[String | Int]
[4:23..4:27):List => *.apply[String]
[4:46..4:50):List => *.apply[Int]
[5:23..5:27):List => *.apply[List[Int]]
[5:28..5:32):List => *.apply[Int]
[5:43..5:47):List => *.apply[Int]
[8:4..8:26):syntheticList4.flatMap => *[Int]
[9:6..9:19):innerList.map => *[Int]
[11:4..11:26):syntheticList4.flatMap => *[String]
[12:6..12:19):innerList.map => *[String]
[17:4..17:21):syntheticList.map => *[Int]
[21:4..21:38):syntheticList.headOption.getOrElse => *[Int | String]
[26:13..26:15)::: => *.unapply[Int]

expect/TastyQueryMatching.scala
-------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMatching.scala
Text => empty
Language => Scala
Symbols => 9 entries
Occurrences => 30 entries

Symbols:
_empty_/TastyQueryMatching# => class TastyQueryMatching extends Object { self: TastyQueryMatching => +3 decls }
_empty_/TastyQueryMatching#`<init>`(). => primary ctor <init> (): TastyQueryMatching
_empty_/TastyQueryMatching#matchingDefault(). => method matchingDefault (param x: Boolean | Unit): Unit
_empty_/TastyQueryMatching#matchingDefault().(x) => param x: Boolean | Unit
_empty_/TastyQueryMatching#matchingOr(). => method matchingOr (param x: Int | String | Double): String | Int | Unit
_empty_/TastyQueryMatching#matchingOr().(x) => param x: Int | String | Double
local0 => val local s: String
local1 => val local number: Int
local2 => val local double: Double

Occurrences:
[0:6..0:24): TastyQueryMatching <- _empty_/TastyQueryMatching#
[1:4..1:4): <- _empty_/TastyQueryMatching#`<init>`().
[1:8..1:18): matchingOr <- _empty_/TastyQueryMatching#matchingOr().
[1:19..1:20): x <- _empty_/TastyQueryMatching#matchingOr().(x)
[1:23..1:26): Int -> scala/Int#
[1:27..1:28): | -> scala/`|`#
[1:29..1:35): String -> scala/Predef.String#
[1:36..1:37): | -> scala/`|`#
[1:38..1:44): Double -> scala/Double#
[2:8..2:9): x -> _empty_/TastyQueryMatching#matchingOr().(x)
[3:17..3:18): s <- local0
[3:20..3:26): String -> scala/Predef.String#
[3:30..3:31): s -> local0
[3:32..3:38): concat -> java/lang/String#concat().
[3:39..3:40): s -> local0
[4:17..4:23): number <- local1
[4:25..4:28): Int -> scala/Int#
[4:33..4:39): number -> local1
[4:40..4:41): * -> scala/Int#`*`(+3).
[4:42..4:48): number -> local1
[5:17..5:23): double <- local2
[5:25..5:31): Double -> scala/Double#
[5:35..5:40): print -> scala/Predef.print().
[7:8..7:23): matchingDefault <- _empty_/TastyQueryMatching#matchingDefault().
[7:24..7:25): x <- _empty_/TastyQueryMatching#matchingDefault().(x)
[7:27..7:34): Boolean -> scala/Boolean#
[7:35..7:36): | -> scala/`|`#
[7:37..7:41): Unit -> scala/Unit#
[8:8..8:9): x -> _empty_/TastyQueryMatching#matchingDefault().(x)
[9:20..9:24): Unit -> scala/Unit#

expect/TastyQueryMethodComplexFormula.scala
-------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodComplexFormula.scala
Text => empty
Language => Scala
Symbols => 5 entries
Occurrences => 12 entries

Symbols:
_empty_/TastyQueryMethodComplexFormula# => class TastyQueryMethodComplexFormula extends Object { self: TastyQueryMethodComplexFormula => +2 decls }
_empty_/TastyQueryMethodComplexFormula#`<init>`(). => primary ctor <init> (): TastyQueryMethodComplexFormula
_empty_/TastyQueryMethodComplexFormula#complexFormula(). => method complexFormula (param param1: Int, param param2: Int): Int
_empty_/TastyQueryMethodComplexFormula#complexFormula().(param1) => param param1: Int
_empty_/TastyQueryMethodComplexFormula#complexFormula().(param2) => param param2: Int

Occurrences:
[0:6..0:36): TastyQueryMethodComplexFormula <- _empty_/TastyQueryMethodComplexFormula#
[1:8..1:8): <- _empty_/TastyQueryMethodComplexFormula#`<init>`().
[1:12..1:26): complexFormula <- _empty_/TastyQueryMethodComplexFormula#complexFormula().
[1:27..1:33): param1 <- _empty_/TastyQueryMethodComplexFormula#complexFormula().(param1)
[1:34..1:37): Int -> scala/Int#
[1:39..1:45): param2 <- _empty_/TastyQueryMethodComplexFormula#complexFormula().(param2)
[1:46..1:49): Int -> scala/Int#
[1:54..1:60): param1 -> _empty_/TastyQueryMethodComplexFormula#complexFormula().(param1)
[1:60..1:61): * -> scala/Int#`*`(+3).
[1:61..1:67): param2 -> _empty_/TastyQueryMethodComplexFormula#complexFormula().(param2)
[1:68..1:69): / -> scala/Int#`/`(+3).
[1:69..1:75): param2 -> _empty_/TastyQueryMethodComplexFormula#complexFormula().(param2)

expect/TastyQueryMethodDifficultNames.scala
-------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodDifficultNames.scala
Text => empty
Language => Scala
Symbols => 9 entries
Occurrences => 16 entries
Diagnostics => 2 entries

Symbols:
_empty_/MethodWithDifficultName# => class MethodWithDifficultName extends Object { self: MethodWithDifficultName => +3 decls }
_empty_/MethodWithDifficultName#`<init>`(). => primary ctor <init> (): MethodWithDifficultName
_empty_/MethodWithDifficultName#e(). => method e (param e: Boolean): Unit
_empty_/MethodWithDifficultName#e().(e) => param e: Boolean
_empty_/MethodWithDifficultName#methodDifficultName(). => method methodDifficultName (param z: Int, param y: String): Unit
_empty_/MethodWithDifficultName#methodDifficultName().(y) => param y: String
_empty_/MethodWithDifficultName#methodDifficultName().(z) => param z: Int
local0 => val local e: Boolean
local1 => val local methodDifficultName: Int

Occurrences:
[1:6..1:29): MethodWithDifficultName <- _empty_/MethodWithDifficultName#
[3:4..3:4): <- _empty_/MethodWithDifficultName#`<init>`().
[3:8..3:9): e <- _empty_/MethodWithDifficultName#e().
[3:10..3:11): e <- _empty_/MethodWithDifficultName#e().(e)
[3:13..3:20): Boolean -> scala/Boolean#
[3:29..3:30): e <- local0
[3:32..3:39): Boolean -> scala/Boolean#
[3:46..3:48): == -> scala/Any#`==`().
[3:53..3:55): && -> scala/Boolean#`&&`().
[3:61..3:63): == -> scala/Boolean#`==`().
[4:8..4:27): methodDifficultName <- _empty_/MethodWithDifficultName#methodDifficultName().
[4:28..4:29): z <- _empty_/MethodWithDifficultName#methodDifficultName().(z)
[4:31..4:34): Int -> scala/Int#
[4:36..4:37): y <- _empty_/MethodWithDifficultName#methodDifficultName().(y)
[4:39..4:45): String -> scala/Predef.String#
[4:54..4:73): methodDifficultName <- local1

Diagnostics:
[3:29..3:30): [warning] unused local definition
[4:54..4:73): [warning] unused local definition

expect/TastyQueryMethodWithParam.scala
--------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodWithParam.scala
Text => empty
Language => Scala
Symbols => 5 entries
Occurrences => 7 entries

Symbols:
_empty_/MethodWithParam# => class MethodWithParam extends Object { self: MethodWithParam => +2 decls }
_empty_/MethodWithParam#`<init>`(). => primary ctor <init> (): MethodWithParam
_empty_/MethodWithParam#methodWithTemParam(). => method methodWithTemParam (param z: Int, param y: String): String
_empty_/MethodWithParam#methodWithTemParam().(y) => param y: String
_empty_/MethodWithParam#methodWithTemParam().(z) => param z: Int

Occurrences:
[0:6..0:21): MethodWithParam <- _empty_/MethodWithParam#
[1:4..1:4): <- _empty_/MethodWithParam#`<init>`().
[1:8..1:26): methodWithTemParam <- _empty_/MethodWithParam#methodWithTemParam().
[1:27..1:28): z <- _empty_/MethodWithParam#methodWithTemParam().(z)
[1:30..1:33): Int -> scala/Int#
[1:35..1:36): y <- _empty_/MethodWithParam#methodWithTemParam().(y)
[1:38..1:44): String -> scala/Predef.String#

expect/TastyQueryMethodWithParams.scala
---------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodWithParams.scala
Text => empty
Language => Scala
Symbols => 19 entries
Occurrences => 53 entries

Symbols:
_empty_/MethodWithParamMultiply# => class MethodWithParamMultiply extends Object { self: MethodWithParamMultiply => +6 decls }
_empty_/MethodWithParamMultiply#`<init>`(). => primary ctor <init> (): MethodWithParamMultiply
_empty_/MethodWithParamMultiply#addition(). => method addition (param z: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#addition().(y) => param y: Int
_empty_/MethodWithParamMultiply#addition().(z) => param z: Int
_empty_/MethodWithParamMultiply#complexFormula(). => method complexFormula (param param1: Int, param param2: Double, param param3: Float): Int
_empty_/MethodWithParamMultiply#complexFormula().(param1) => param param1: Int
_empty_/MethodWithParamMultiply#complexFormula().(param2) => param param2: Double
_empty_/MethodWithParamMultiply#complexFormula().(param3) => param param3: Float
_empty_/MethodWithParamMultiply#division(). => method division (param x: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#division().(x) => param x: Int
_empty_/MethodWithParamMultiply#division().(y) => param y: Int
_empty_/MethodWithParamMultiply#multiplication(). => method multiplication (param x: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#multiplication().(x) => param x: Int
_empty_/MethodWithParamMultiply#multiplication().(y) => param y: Int
_empty_/MethodWithParamMultiply#power(). => method power (param x: Int, param y: Int): Int
_empty_/MethodWithParamMultiply#power().(x) => param x: Int
_empty_/MethodWithParamMultiply#power().(y) => param y: Int
local0 => val local intermidiate: Int

Occurrences:
[0:6..0:29): MethodWithParamMultiply <- _empty_/MethodWithParamMultiply#
[1:4..1:4): <- _empty_/MethodWithParamMultiply#`<init>`().
[1:8..1:16): addition <- _empty_/MethodWithParamMultiply#addition().
[1:17..1:18): z <- _empty_/MethodWithParamMultiply#addition().(z)
[1:20..1:23): Int -> scala/Int#
[1:25..1:26): y <- _empty_/MethodWithParamMultiply#addition().(y)
[1:28..1:31): Int -> scala/Int#
[1:35..1:36): z -> _empty_/MethodWithParamMultiply#addition().(z)
[1:36..1:37): + -> scala/Int#`+`(+4).
[1:37..1:38): y -> _empty_/MethodWithParamMultiply#addition().(y)
[2:8..2:22): multiplication <- _empty_/MethodWithParamMultiply#multiplication().
[2:23..2:24): x <- _empty_/MethodWithParamMultiply#multiplication().(x)
[2:25..2:28): Int -> scala/Int#
[2:30..2:31): y <- _empty_/MethodWithParamMultiply#multiplication().(y)
[2:33..2:36): Int -> scala/Int#
[2:40..2:41): x -> _empty_/MethodWithParamMultiply#multiplication().(x)
[2:41..2:42): * -> scala/Int#`*`(+3).
[2:42..2:43): y -> _empty_/MethodWithParamMultiply#multiplication().(y)
[3:8..3:16): division <- _empty_/MethodWithParamMultiply#division().
[3:17..3:18): x <- _empty_/MethodWithParamMultiply#division().(x)
[3:19..3:22): Int -> scala/Int#
[3:24..3:25): y <- _empty_/MethodWithParamMultiply#division().(y)
[3:26..3:29): Int -> scala/Int#
[3:33..3:34): x -> _empty_/MethodWithParamMultiply#division().(x)
[3:34..3:35): / -> scala/Int#`/`(+3).
[3:35..3:36): y -> _empty_/MethodWithParamMultiply#division().(y)
[4:8..4:13): power <- _empty_/MethodWithParamMultiply#power().
[4:14..4:15): x <- _empty_/MethodWithParamMultiply#power().(x)
[4:16..4:19): Int -> scala/Int#
[4:21..4:22): y <- _empty_/MethodWithParamMultiply#power().(y)
[4:23..4:26): Int -> scala/Int#
[4:30..4:31): x -> _empty_/MethodWithParamMultiply#power().(x)
[4:31..4:32): ^ -> scala/Int#`^`(+3).
[4:32..4:33): y -> _empty_/MethodWithParamMultiply#power().(y)
[5:8..5:22): complexFormula <- _empty_/MethodWithParamMultiply#complexFormula().
[5:23..5:29): param1 <- _empty_/MethodWithParamMultiply#complexFormula().(param1)
[5:31..5:34): Int -> scala/Int#
[5:36..5:42): param2 <- _empty_/MethodWithParamMultiply#complexFormula().(param2)
[5:44..5:50): Double -> scala/Double#
[5:52..5:58): param3 <- _empty_/MethodWithParamMultiply#complexFormula().(param3)
[5:60..5:65): Float -> scala/Float#
[6:12..6:24): intermidiate <- local0
[6:28..6:34): param3 -> _empty_/MethodWithParamMultiply#complexFormula().(param3)
[6:35..6:36): * -> scala/Float#`*`(+5).
[6:38..6:44): param1 -> _empty_/MethodWithParamMultiply#complexFormula().(param1)
[6:45..6:46): + -> scala/Int#`+`(+6).
[6:47..6:53): param3 -> _empty_/MethodWithParamMultiply#complexFormula().(param3)
[6:54..6:55): / -> scala/Float#`/`(+6).
[6:55..6:61): param2 -> _empty_/MethodWithParamMultiply#complexFormula().(param2)
[6:63..6:68): toInt -> scala/Double#toInt().
[7:8..7:20): intermidiate -> local0
[7:21..7:22): ^ -> scala/Int#`^`(+3).
[7:23..7:35): intermidiate -> local0

expect/TastyQueryMethodWithParams2.scala
----------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryMethodWithParams2.scala
Text => empty
Language => Scala
Symbols => 4 entries
Occurrences => 4 entries
Diagnostics => 1 entries

Symbols:
_empty_/MethodWithParamMultiply2# => class MethodWithParamMultiply2 extends Object { self: MethodWithParamMultiply2 => +2 decls }
_empty_/MethodWithParamMultiply2#`<init>`(). => primary ctor <init> (): MethodWithParamMultiply2
_empty_/MethodWithParamMultiply2#complexFormula(). => method complexFormula (): Unit
local0 => val local intermidiate: Int

Occurrences:
[0:6..0:30): MethodWithParamMultiply2 <- _empty_/MethodWithParamMultiply2#
[1:4..1:4): <- _empty_/MethodWithParamMultiply2#`<init>`().
[1:8..1:22): complexFormula <- _empty_/MethodWithParamMultiply2#complexFormula().
[2:12..2:24): intermidiate <- local0

Diagnostics:
[2:12..2:24): [warning] unused local definition

expect/TastyQuerySimpleClass.scala
----------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQuerySimpleClass.scala
Text => empty
Language => Scala
Symbols => 2 entries
Occurrences => 2 entries

Symbols:
_empty_/SimpleClass# => class SimpleClass extends Object { self: SimpleClass => +1 decls }
_empty_/SimpleClass#`<init>`(). => primary ctor <init> (): SimpleClass

Occurrences:
[0:0..0:0): <- _empty_/SimpleClass#`<init>`().
[0:6..0:17): SimpleClass <- _empty_/SimpleClass#

expect/TastyQuerySimpleMethod.scala
-----------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQuerySimpleMethod.scala
Text => empty
Language => Scala
Symbols => 4 entries
Occurrences => 6 entries

Symbols:
_empty_/TastyQuerySimpleMethod# => class TastyQuerySimpleMethod extends Object { self: TastyQuerySimpleMethod => +2 decls }
_empty_/TastyQuerySimpleMethod#`<init>`(). => primary ctor <init> (): TastyQuerySimpleMethod
_empty_/TastyQuerySimpleMethod#simpleMethod(). => method simpleMethod (param x: Int): Int
_empty_/TastyQuerySimpleMethod#simpleMethod().(x) => param x: Int

Occurrences:
[0:6..0:28): TastyQuerySimpleMethod <- _empty_/TastyQuerySimpleMethod#
[1:4..1:4): <- _empty_/TastyQuerySimpleMethod#`<init>`().
[1:8..1:20): simpleMethod <- _empty_/TastyQuerySimpleMethod#simpleMethod().
[1:21..1:22): x <- _empty_/TastyQuerySimpleMethod#simpleMethod().(x)
[1:24..1:27): Int -> scala/Int#
[1:31..1:32): x -> _empty_/TastyQuerySimpleMethod#simpleMethod().(x)

expect/TastyQuerySmallVar.scala
-------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQuerySmallVar.scala
Text => empty
Language => Scala
Symbols => 5 entries
Occurrences => 7 entries
Diagnostics => 1 entries

Symbols:
_empty_/TastyQueryIncorrectScalaBehavior# => class TastyQueryIncorrectScalaBehavior extends Object { self: TastyQueryIncorrectScalaBehavior => +2 decls }
_empty_/TastyQueryIncorrectScalaBehavior#`<init>`(). => primary ctor <init> (): TastyQueryIncorrectScalaBehavior
_empty_/TastyQueryIncorrectScalaBehavior#a(). => method a (param b: Int): Unit
_empty_/TastyQueryIncorrectScalaBehavior#a().(b) => param b: Int
local0 => val local b: Boolean

Occurrences:
[0:6..0:38): TastyQueryIncorrectScalaBehavior <- _empty_/TastyQueryIncorrectScalaBehavior#
[1:4..1:4): <- _empty_/TastyQueryIncorrectScalaBehavior#`<init>`().
[1:8..1:9): a <- _empty_/TastyQueryIncorrectScalaBehavior#a().
[1:10..1:11): b <- _empty_/TastyQueryIncorrectScalaBehavior#a().(b)
[1:13..1:16): Int -> scala/Int#
[2:12..2:13): b <- local0
[2:15..2:22): Boolean -> scala/Boolean#

Diagnostics:
[2:12..2:13): [warning] unused local definition

expect/TastyQueryValDifficultNames.scala
----------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryValDifficultNames.scala
Text => empty
Language => Scala
Symbols => 8 entries
Occurrences => 20 entries

Symbols:
_empty_/TastyQueryValDifficultNames# => class TastyQueryValDifficultNames extends Object { self: TastyQueryValDifficultNames => +6 decls }
_empty_/TastyQueryValDifficultNames#`<init>`(). => primary ctor <init> (): TastyQueryValDifficultNames
_empty_/TastyQueryValDifficultNames#a. => val method a String
_empty_/TastyQueryValDifficultNames#aa. => val method aa String
_empty_/TastyQueryValDifficultNames#g. => val method g String
_empty_/TastyQueryValDifficultNames#i. => val method i String
_empty_/TastyQueryValDifficultNames#isEqualTrimmed. => val method isEqualTrimmed Boolean
local0 => val local i: String

Occurrences:
[1:6..1:33): TastyQueryValDifficultNames <- _empty_/TastyQueryValDifficultNames#
[2:4..2:4): <- _empty_/TastyQueryValDifficultNames#`<init>`().
[2:8..2:9): g <- _empty_/TastyQueryValDifficultNames#g.
[2:11..2:17): String -> scala/Predef.String#
[2:20..2:21): g -> _empty_/TastyQueryValDifficultNames#g.
[3:8..3:9): i <- _empty_/TastyQueryValDifficultNames#i.
[3:11..3:17): String -> scala/Predef.String#
[3:20..3:21): i -> _empty_/TastyQueryValDifficultNames#i.
[3:35..3:36): i <- local0
[3:38..3:44): String -> scala/Predef.String#
[3:48..3:49): i -> local0
[3:50..3:51): + -> java/lang/String#`+`().
[3:67..3:68): i -> _empty_/TastyQueryValDifficultNames#i.
[4:8..4:9): a <- _empty_/TastyQueryValDifficultNames#a.
[4:23..4:25): aa <- _empty_/TastyQueryValDifficultNames#aa.
[4:38..4:52): isEqualTrimmed <- _empty_/TastyQueryValDifficultNames#isEqualTrimmed.
[4:55..4:56): a -> _empty_/TastyQueryValDifficultNames#a.
[4:57..4:61): trim -> java/lang/String#trim().
[4:62..4:64): == -> scala/Any#`==`().
[4:65..4:67): aa -> _empty_/TastyQueryValDifficultNames#aa.

expect/TastyQueryVar.scala
--------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryVar.scala
Text => empty
Language => Scala
Symbols => 11 entries
Occurrences => 11 entries
Diagnostics => 1 entries

Symbols:
_empty_/TastyQueryVar# => class TastyQueryVar extends Object { self: TastyQueryVar => +6 decls }
_empty_/TastyQueryVar#`<init>`(). => primary ctor <init> (): TastyQueryVar
_empty_/TastyQueryVar#`p_=`(). => var method p_= (param x$1: Unit): Unit
_empty_/TastyQueryVar#`p_=`().(x$1) => param x$1: Unit
_empty_/TastyQueryVar#`x_=`(). => var method x_= (param x$1: Int): Unit
_empty_/TastyQueryVar#`x_=`().(x$1) => param x$1: Int
_empty_/TastyQueryVar#foo(). => method foo => Unit
_empty_/TastyQueryVar#p(). => var method p Unit
_empty_/TastyQueryVar#x(). => var method x Int
local0 => var local x: Int
local1 => val local x: Boolean

Occurrences:
[0:6..0:19): TastyQueryVar <- _empty_/TastyQueryVar#
[1:4..1:4): <- _empty_/TastyQueryVar#`<init>`().
[1:8..1:9): x <- _empty_/TastyQueryVar#x().
[2:4..2:5): x -> _empty_/TastyQueryVar#`x_=`().
[4:8..4:11): foo <- _empty_/TastyQueryVar#foo().
[5:12..5:13): x <- local0
[6:8..6:9): x -> local0
[7:8..7:9): p <- _empty_/TastyQueryVar#p().
[7:12..7:15): foo -> _empty_/TastyQueryVar#foo().
[8:4..8:5): p -> _empty_/TastyQueryVar#`p_=`().
[8:13..8:14): x <- local1

Diagnostics:
[8:13..8:14): [warning] unused local definition

expect/TastyQueryVariousFeatures.scala
--------------------------------------

Summary:
Schema => SemanticDB v4
Uri => TastyQueryVariousFeatures.scala
Text => empty
Language => Scala
Symbols => 24 entries
Occurrences => 75 entries

Symbols:
_empty_/VariousFeatures# => class VariousFeatures extends Object { self: VariousFeatures => +8 decls }
_empty_/VariousFeatures#`<init>`(). => primary ctor <init> (param param1: Double | String, param param2: Int): VariousFeatures
_empty_/VariousFeatures#`<init>`().(param1) => param param1: Double | String
_empty_/VariousFeatures#`<init>`().(param2) => param param2: Int
_empty_/VariousFeatures#incompleteFormula(). => method incompleteFormula (param param1: Int, param param2: Double, param param3: Float): Int
_empty_/VariousFeatures#incompleteFormula().(param1) => param param1: Int
_empty_/VariousFeatures#incompleteFormula().(param2) => param param2: Double
_empty_/VariousFeatures#incompleteFormula().(param3) => param param3: Float
_empty_/VariousFeatures#modfiyString(). => method modfiyString (param inputString: String): String
_empty_/VariousFeatures#modfiyString().(inputString) => param inputString: String
_empty_/VariousFeatures#modified. => val method modified String
_empty_/VariousFeatures#param1. => private[this] val method param1 Double | String
_empty_/VariousFeatures#param2. => private[this] val method param2 Int
_empty_/VariousFeatures#usingClassParams(). => method usingClassParams => Int | Double | None
_empty_/VariousFeatures#x. => val method x String & Int
_empty_/VariousFeatures2# => class VariousFeatures2 extends Object { self: VariousFeatures2 => +3 decls }
_empty_/VariousFeatures2#`<init>`(). => primary ctor <init> (): VariousFeatures2
_empty_/VariousFeatures2#printHelloWorld(). => method printHelloWorld => Unit
_empty_/VariousFeatures2#y. => val method y String
local0 => val local param1: Double
local1 => val local someLocalVal: Int
local2 => val local otherLocalVal: Int
local3 => val local string: String
local4 => val local double: Double

Occurrences:
[0:6..0:21): VariousFeatures <- _empty_/VariousFeatures#
[0:21..0:21): <- _empty_/VariousFeatures#`<init>`().
[0:22..0:28): param1 <- _empty_/VariousFeatures#param1.
[0:30..0:36): Double -> scala/Double#
[0:37..0:38): | -> scala/`|`#
[0:39..0:45): String -> scala/Predef.String#
[0:47..0:53): param2 <- _empty_/VariousFeatures#param2.
[0:55..0:58): Int -> scala/Int#
[1:8..1:9): x <- _empty_/VariousFeatures#x.
[1:12..1:18): String -> scala/Predef.String#
[1:19..1:20): & -> scala/`&`#
[1:21..1:24): Int -> scala/Int#
[1:27..1:30): ??? -> scala/Predef.`???`().
[2:8..2:24): usingClassParams <- _empty_/VariousFeatures#usingClassParams().
[2:27..2:33): param1 -> _empty_/VariousFeatures#param1.
[3:13..3:19): param1 <- local0
[3:21..3:27): Double -> scala/Double#
[4:12..4:18): param1 -> local0
[4:19..4:24): toInt -> scala/Double#toInt().
[4:25..4:26): + -> scala/Int#`+`(+4).
[4:27..4:33): param2 -> _empty_/VariousFeatures#param2.
[6:37..6:49): someLocalVal <- local1
[7:16..7:29): otherLocalVal <- local2
[8:15..8:21): param2 -> _empty_/VariousFeatures#param2.
[8:22..8:23): > -> scala/Int#`>`(+3).
[9:17..9:29): someLocalVal -> local1
[9:30..9:31): * -> scala/Int#`*`(+3).
[9:32..9:45): otherLocalVal -> local2
[9:47..9:55): toDouble -> scala/Int#toDouble().
[11:16..11:20): None -> scala/None.
[12:8..12:20): modfiyString <- _empty_/VariousFeatures#modfiyString().
[12:21..12:32): inputString <- _empty_/VariousFeatures#modfiyString().(inputString)
[12:34..12:40): String -> scala/Predef.String#
[12:43..12:49): String -> scala/Predef.String#
[13:8..13:14): param1 -> _empty_/VariousFeatures#param1.
[14:17..14:23): string <- local3
[14:25..14:31): String -> scala/Predef.String#
[14:35..14:41): string -> local3
[14:42..14:48): concat -> java/lang/String#concat().
[14:49..14:60): inputString -> _empty_/VariousFeatures#modfiyString().(inputString)
[15:17..15:23): double <- local4
[15:25..15:31): Double -> scala/Double#
[15:35..15:46): inputString -> _empty_/VariousFeatures#modfiyString().(inputString)
[15:47..15:53): charAt -> java/lang/String#charAt().
[15:54..15:60): double -> local4
[15:61..15:66): toInt -> scala/Double#toInt().
[15:68..15:76): toString -> scala/Any#toString().
[17:8..17:16): modified <- _empty_/VariousFeatures#modified.
[17:19..17:31): modfiyString -> _empty_/VariousFeatures#modfiyString().
[19:8..19:25): incompleteFormula <- _empty_/VariousFeatures#incompleteFormula().
[19:26..19:32): param1 <- _empty_/VariousFeatures#incompleteFormula().(param1)
[19:34..19:37): Int -> scala/Int#
[19:39..19:45): param2 <- _empty_/VariousFeatures#incompleteFormula().(param2)
[19:47..19:53): Double -> scala/Double#
[19:55..19:61): param3 <- _empty_/VariousFeatures#incompleteFormula().(param3)
[19:63..19:68): Float -> scala/Float#
[20:12..20:18): param3 -> _empty_/VariousFeatures#incompleteFormula().(param3)
[20:19..20:20): % -> scala/Float#`%`(+5).
[20:22..20:28): param1 -> _empty_/VariousFeatures#incompleteFormula().(param1)
[20:29..20:30): + -> scala/Int#`+`(+6).
[20:31..20:37): param3 -> _empty_/VariousFeatures#incompleteFormula().(param3)
[20:38..20:39): / -> scala/Float#`/`(+6).
[20:39..20:45): param2 -> _empty_/VariousFeatures#incompleteFormula().(param2)
[20:47..20:52): toInt -> scala/Double#toInt().
[20:53..20:55): == -> scala/Int#`==`(+3).
[21:12..21:15): ??? -> scala/Predef.`???`().
[23:12..23:18): param1 -> _empty_/VariousFeatures#incompleteFormula().(param1)
[23:19..23:20): ^ -> scala/Int#`^`(+3).
[23:21..23:27): param1 -> _empty_/VariousFeatures#incompleteFormula().(param1)
[27:6..27:22): VariousFeatures2 <- _empty_/VariousFeatures2#
[28:4..28:4): <- _empty_/VariousFeatures2#`<init>`().
[28:8..28:9): y <- _empty_/VariousFeatures2#y.
[29:8..29:23): printHelloWorld <- _empty_/VariousFeatures2#printHelloWorld().
[29:26..29:31): print -> scala/Predef.print().
[29:32..29:33): y -> _empty_/VariousFeatures2#y.

expect/example-dir/TastyQueryFileInDir.scala
--------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => example-dir/TastyQueryFileInDir.scala
Text => empty
Language => Scala
Symbols => 2 entries
Occurrences => 3 entries

Symbols:
example/FileInDir# => class FileInDir extends Object { self: FileInDir => +1 decls }
example/FileInDir#`<init>`(). => primary ctor <init> (): FileInDir

Occurrences:
[0:8..0:15): example <- example/
[1:0..1:0): <- example/FileInDir#`<init>`().
[1:6..1:15): FileInDir <- example/FileInDir#

